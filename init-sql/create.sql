-- Подключение к XEPDB1 от имени SYS для создания пользователя
ALTER SESSION SET CONTAINER = XEPDB1;

-- Создание пользователя oracule_user_app
CREATE USER oracule_user_app IDENTIFIED BY app_password;
GRANT CONNECT, RESOURCE, CREATE TRIGGER, CREATE SEQUENCE, CREATE PROCEDURE TO oracule_user_app;
ALTER USER oracule_user_app QUOTA UNLIMITED ON USERS;

-- Переключение на пользователя oracule_user_app
CONNECT oracule_user_app/app_password@XEPDB1;

-- Установка контейнера для oracule_user_app
ALTER SESSION SET CONTAINER = XEPDB1;

-- Создание таблиц
CREATE TABLE USERS (
                       ID NUMBER(10) NOT NULL,
                       LOGIN VARCHAR2(255) NOT NULL,
                       PASSWORD VARCHAR2(255) NOT NULL,
                       SURNAME VARCHAR2(255) NOT NULL,
                       NAME VARCHAR2(255) NOT NULL,
                       PATRONYMIC VARCHAR2(255) NOT NULL,
                       USER_GROUP_ID NUMBER(10) NOT NULL,
                       REGISTRATION_DATE DATE NOT NULL,
                       IS_BLOCKED NUMBER(1) NOT NULL,
                       IS_AUTHORIZED NUMBER(1) NOT NULL,
                       CONSTRAINT USERS_PK PRIMARY KEY (ID)
);

CREATE TABLE MEDICAL_CARD_HISTORY (
                                      ID NUMBER(10) NOT NULL,
                                      DIAGNOSIS VARCHAR2(255) NOT NULL,
                                      THERAPY CLOB NOT NULL,
                                      APPOINTMENT_ID NUMBER(10) NOT NULL,
                                      CONSTRAINT MEDICAL_CARD_HISTORY_PK PRIMARY KEY (ID)
);

CREATE TABLE USER_GROUPS (
                             ID NUMBER(10) NOT NULL,
                             NAME VARCHAR2(255) NOT NULL,
                             CONSTRAINT USER_GROUPS_PK PRIMARY KEY (ID)
);

CREATE TABLE DOCTORS_SPECIALIZATIONS (
                                         ID NUMBER(10) NOT NULL,
                                         DOCTOR_ID NUMBER(10) NOT NULL,
                                         SPECIALIZATION_ID NUMBER(10) NOT NULL,
                                         CONSTRAINT DOCTORS_SPECIALIZATIONS_PK PRIMARY KEY (ID)
);

CREATE TABLE APPOINTMENT (
                             ID NUMBER(10) NOT NULL,
                             DOCTOR_ID NUMBER(10) NOT NULL,
                             PATIENT_ID NUMBER(10) NOT NULL,
                             APPOINTMENT_DATE DATE NOT NULL,
                             CONSTRAINT APPOINTMENT_PK PRIMARY KEY (ID)
);

CREATE TABLE SPECIALIZATIONS (
                                 ID NUMBER(10) NOT NULL,
                                 NAME VARCHAR2(255) NOT NULL,
                                 CONSTRAINT SPECIALIZATIONS_PK PRIMARY KEY (ID)
);

CREATE TABLE VACATION_SCHEDULE (
                                   ID NUMBER(10) NOT NULL,
                                   EMPLOYEE_ID NUMBER(10) NOT NULL,
                                   VACATION_DATE DATE NOT NULL,
                                   IS_APPROVED NUMBER(1) NOT NULL,
                                   CONSTRAINT VACATION_SCHEDULE_PK PRIMARY KEY (ID)
);

-- Добавление внешних ключей
ALTER TABLE USERS
    ADD CONSTRAINT USERS_USER_GROUP_ID_FK FOREIGN KEY (USER_GROUP_ID) REFERENCES USER_GROUPS (ID) ON DELETE CASCADE;

ALTER TABLE DOCTORS_SPECIALIZATIONS
    ADD CONSTRAINT DOCTORS_SPECIALIZATIONS_SPECIALIZATION_ID_FK FOREIGN KEY (SPECIALIZATION_ID) REFERENCES SPECIALIZATIONS (ID) ON DELETE CASCADE;

ALTER TABLE DOCTORS_SPECIALIZATIONS
    ADD CONSTRAINT DOCTORS_SPECIALIZATIONS_DOCTOR_ID_FK FOREIGN KEY (DOCTOR_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE VACATION_SCHEDULE
    ADD CONSTRAINT VACATION_SCHEDULE_EMPLOYEE_ID_FK FOREIGN KEY (EMPLOYEE_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE APPOINTMENT
    ADD CONSTRAINT APPOINTMENT_DOCTOR_ID_FK FOREIGN KEY (DOCTOR_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE APPOINTMENT
    ADD CONSTRAINT APPOINTMENT_PATIENT_ID_FK FOREIGN KEY (PATIENT_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE MEDICAL_CARD_HISTORY
    ADD CONSTRAINT MEDICAL_CARD_HISTORY_APPOINTMENT_FK FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENT (ID) ON DELETE CASCADE;

commit;

-- Создание уникальных последовательностей для id
CREATE SEQUENCE USERS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE USER_GROUPS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE DOCTORS_SPECIALIZATIONS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE APPOINTMENT_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SPECIALIZATIONS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE VACATION_SCHEDULE_SEQ START WITH 1 INCREMENT BY 1;

commit;

-- Триггеры для автоинкремента и автоподстановки
CREATE OR REPLACE TRIGGER USERS_TR BEFORE INSERT ON USERS
    FOR EACH ROW
BEGIN
    SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    :NEW.REGISTRATION_DATE := SYSDATE;
    :NEW.IS_AUTHORIZED := 0;
END;
/

CREATE OR REPLACE TRIGGER USER_GROUPS_TR BEFORE INSERT ON USER_GROUPS
    FOR EACH ROW
BEGIN
    SELECT USER_GROUPS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER DOCTORS_SPECIALIZATIONS_TR BEFORE INSERT ON DOCTORS_SPECIALIZATIONS
    FOR EACH ROW
BEGIN
    SELECT DOCTORS_SPECIALIZATIONS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER APPOINTMENT_TR BEFORE INSERT ON APPOINTMENT
    FOR EACH ROW
BEGIN
    SELECT APPOINTMENT_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER SPECIALIZATIONS_TR BEFORE INSERT ON SPECIALIZATIONS
    FOR EACH ROW
BEGIN
    SELECT SPECIALIZATIONS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER VACATION_SCHEDULE_TR BEFORE INSERT ON VACATION_SCHEDULE
    FOR EACH ROW
BEGIN
    SELECT VACATION_SCHEDULE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

commit;

-- Процедура для вставки диапазона выходных (по факту - заявления на отпуск от сотрудника)
CREATE OR REPLACE PROCEDURE INSERT_VACATION_DAYS (
    employee_id INT,
    p_start_date DATE,
    p_end_date DATE
)
AS
    v_count NUMBER;
BEGIN
    IF p_start_date > p_end_date THEN
        raise_application_error(-20001, 'Начальная дата должна быть раньше или равна конечной.');
    END IF;

    FOR i IN 0 .. (p_end_date - p_start_date) LOOP
            SELECT COUNT(ID) INTO v_count FROM VACATION_SCHEDULE
            WHERE EMPLOYEE_ID = employee_id AND VACATION_DATE = p_start_date + i;

            IF v_count > 0 THEN
                raise_application_error(-20002, 'У врача уже запланирован выходной на ' || TO_CHAR(p_start_date + i, 'DD.MM.YYYY'));
            END IF;

            INSERT INTO VACATION_SCHEDULE (EMPLOYEE_ID, VACATION_DATE, IS_APPROVED)
            VALUES (employee_id, p_start_date + i, 0);
        END LOOP;
END;
/

commit;

-- Заполнение таблицы USER_GROUPS
INSERT INTO USER_GROUPS (ID, NAME) VALUES (1, 'Системный администратор');
INSERT INTO USER_GROUPS (ID, NAME) VALUES (2, 'Модератор');
INSERT INTO USER_GROUPS (ID, NAME) VALUES (3, 'Администратор');
INSERT INTO USER_GROUPS (ID, NAME) VALUES (4, 'Врач');
INSERT INTO USER_GROUPS (ID, NAME) VALUES (5, 'Пациент');

-- Заполнение таблицы SPECIALIZATIONS
INSERT INTO SPECIALIZATIONS (NAME) VALUES ('Терапевт');
INSERT INTO SPECIALIZATIONS (NAME) VALUES ('Хирург');
INSERT INTO SPECIALIZATIONS (NAME) VALUES ('Кардиолог');
INSERT INTO SPECIALIZATIONS (NAME) VALUES ('Невролог');

-- Заполнение таблицы USERS
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('admin', '123', 'Петров', 'Петр', 'Петрович', 1,0);
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('moderator', '123', 'Иванов', 'Иван', 'Иванович', 2,0);
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('sidor', '123', 'Сидоров', 'Сидор', 'Сидорович', 3,0);
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('doctor1', '123', 'Кузнецов', 'Кузьма', 'Кузьмич', 4,0);
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('doctor2', '123', 'Паровозов', 'Аркадий', 'Аркадьевич', 4,0);
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('patient1', '123', 'Басурманов', 'Армен', 'Арабович', 5,0);
INSERT INTO USERS (LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) VALUES ('patient2', '123', 'Раскольников', 'Родион', 'Романович', 5,1);

-- Заполнение таблицы DOCTORS_SPECIALIZATIONS
INSERT INTO DOCTORS_SPECIALIZATIONS (DOCTOR_ID, SPECIALIZATION_ID) VALUES (4, 1);
INSERT INTO DOCTORS_SPECIALIZATIONS (DOCTOR_ID, SPECIALIZATION_ID) VALUES (4, 4);
INSERT INTO DOCTORS_SPECIALIZATIONS (DOCTOR_ID, SPECIALIZATION_ID) VALUES (5, 2);
INSERT INTO DOCTORS_SPECIALIZATIONS (DOCTOR_ID, SPECIALIZATION_ID) VALUES (5, 3);

-- Заполнение таблицы APPOINTMENT с добавлением времени приема
INSERT INTO APPOINTMENT (DOCTOR_ID, PATIENT_ID, APPOINTMENT_DATE) VALUES (4, 6, TO_DATE('2023-03-25 10:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO APPOINTMENT (DOCTOR_ID, PATIENT_ID, APPOINTMENT_DATE) VALUES (5, 7, TO_DATE('2023-03-26 14:30:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO APPOINTMENT (DOCTOR_ID, PATIENT_ID, APPOINTMENT_DATE) VALUES (5, 7, TO_DATE('2023-03-26 15:30:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO APPOINTMENT (DOCTOR_ID, PATIENT_ID, APPOINTMENT_DATE) VALUES (5, 7, TO_DATE('2023-03-26 16:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Заполнение таблицы MEDICAL_CARD_HISTORY
INSERT INTO MEDICAL_CARD_HISTORY (ID, APPOINTMENT_ID, DIAGNOSIS, THERAPY) VALUES (1, 1, 'Простуда', 'Принимать витамины');
INSERT INTO MEDICAL_CARD_HISTORY (ID, APPOINTMENT_ID, DIAGNOSIS, THERAPY) VALUES (2, 2, 'Грипп', 'Принимать противовирусные');
INSERT INTO MEDICAL_CARD_HISTORY (ID, APPOINTMENT_ID, DIAGNOSIS, THERAPY) VALUES (3, 3, 'Бронхит', 'Принимать антибиотики');

-- Заполнение таблицы VACATION_SCHEDULE с разными комбинациями дат
-- Отпуск на 2 недели
BEGIN
    INSERT_VACATION_DAYS(4, SYSDATE, SYSDATE + 13);
END;
/
-- Неподтвержденный запрос на отгул на день
INSERT INTO VACATION_SCHEDULE (EMPLOYEE_ID, VACATION_DATE, IS_APPROVED) VALUES (4, DATE '2023-04-20', 0);

commit;
