# Users
user.one.by.login.password=SELECT U.ID AS "USER_ID", U.* FROM USERS U WHERE U.LOGIN = ? AND U.PASSWORD = ?
user.one.by.login=SELECT U.ID AS "USER_ID", U.* FROM USERS U WHERE U.LOGIN = ?
user.one.by.id=SELECT U.ID AS "USER_ID", U.* FROM USERS U WHERE U.ID = ?
user.all=SELECT U.ID AS "USER_ID", U.* FROM USERS U ORDER BY U.ID
user.all.filter=SELECT U.ID AS "USER_ID", U.* FROM USERS U WHERE U.IS_BLOCKED = ? AND U.IS_AUTHORIZED = ? ORDER BY U.ID
user.find=\
  SELECT U.ID AS "USER_ID", U.* FROM USERS U \
  WHERE \
    (\
      LOWER(U.LOGIN) LIKE LOWER(?) OR \
      LOWER(U.SURNAME) LIKE LOWER(?) OR \
      LOWER(U.NAME) LIKE LOWER(?) OR \
      LOWER(U.PATRONYMIC) LIKE LOWER(?) \
    ) AND U.USER_GROUP_ID = ? \
  ORDER BY U.ID
user.create=\
INSERT INTO USERS \
(LOGIN, PASSWORD, SURNAME, NAME, PATRONYMIC, USER_GROUP_ID, IS_BLOCKED) \
VALUES (?, ?, ?, ?, ?, ?, ?)
user.edit=\
UPDATE USERS \
SET LOGIN = ?, PASSWORD = ?, SURNAME = ?, NAME = ?, PATRONYMIC = ?, USER_GROUP_ID = ?, IS_BLOCKED = ? \
WHERE ID = ?
user.delete=DELETE FROM USERS WHERE ID = ?
user.block=UPDATE USERS SET IS_BLOCKED = 1, IS_AUTHORIZED = 0 WHERE ID = ?
user.unblock=UPDATE USERS SET IS_BLOCKED = 0 WHERE ID = ?
user.authorize=UPDATE USERS SET IS_AUTHORIZED = 1 WHERE ID = ?
user.unauthorize=UPDATE USERS SET IS_AUTHORIZED = 0 WHERE ID = ?

# Doctors
doctor.one.by.id=\
  SELECT U.ID AS "USER_ID", U.*, LISTAGG(DS.specialization_id, ',') AS SPECIALIZATIONS \
  FROM USERS U \
  JOIN doctors_specializations DS ON U.id = DS.doctor_id \
  WHERE U.USER_GROUP_ID = 4 AND U.ID = ? \
  GROUP BY U.ID, U.LOGIN, U.PASSWORD, U.SURNAME, U.NAME, U.PATRONYMIC, U.USER_GROUP_ID, U.REGISTRATION_DATE, U.IS_BLOCKED, U.IS_AUTHORIZED
doctors.all=\
  SELECT U.ID AS "USER_ID", U.*, LISTAGG(DS.specialization_id, ',') AS SPECIALIZATIONS \
  FROM USERS U \
  JOIN doctors_specializations DS ON U.id = DS.doctor_id \
  WHERE U.USER_GROUP_ID = 4 \
  GROUP BY U.ID, U.LOGIN, U.PASSWORD, U.SURNAME, U.NAME, U.PATRONYMIC, U.USER_GROUP_ID, U.REGISTRATION_DATE, U.IS_BLOCKED, U.IS_AUTHORIZED
doctors.set-specialization=INSERT INTO DOCTORS_SPECIALIZATIONS (DOCTOR_ID, SPECIALIZATION_ID) VALUES (?, ?)

# Specializations
specializations.all=SELECT * FROM SPECIALIZATIONS

# Appointments
appointment.all.as-schedule=\
  SELECT \
    SCHEDULE.DT AS DATETIME, \
    A.* \
  FROM ( \
    SELECT TO_CHAR(TRUNC(?) + (level - 1) / 48 + 8 / 24, 'DD.MM.YYYY HH24:MI:SS') AS DT \
    FROM dual \
    WHERE TO_CHAR(?, 'DD.MM.YYYY') NOT IN (SELECT TO_CHAR(VACATION_DATE, 'DD.MM.YYYY') FROM VACATION_SCHEDULE WHERE EMPLOYEE_ID = ? AND IS_APPROVED = 1) \
    CONNECT BY level <= (20 - 8) * 2 + 1 \
  ) SCHEDULE \
  LEFT JOIN ( \
    SELECT \
      A.ID AS "APPOINTMENT_ID", \
      P.ID "PATIENT_USER_ID", P.LOGIN "PATIENT_LOGIN", P.PASSWORD "PATIENT_PASSWORD", P.SURNAME "PATIENT_SURNAME", P.NAME "PATIENT_NAME", P.PATRONYMIC "PATIENT_PATRONYMIC", P.USER_GROUP_ID "PATIENT_USER_GROUP_ID", P.REGISTRATION_DATE "PATIENT_REGISTRATION_DATE", P.IS_BLOCKED "PATIENT_IS_BLOCKED", P.IS_AUTHORIZED "PATIENT_IS_AUTHORIZED", \
      P2.ID "DOCTOR_USER_ID", P2.LOGIN "DOCTOR_LOGIN", P2.PASSWORD "DOCTOR_PASSWORD", P2.SURNAME "DOCTOR_SURNAME", P2.NAME "DOCTOR_NAME", P2.PATRONYMIC "DOCTOR_PATRONYMIC", P2.USER_GROUP_ID "DOCTOR_USER_GROUP_ID", P2.REGISTRATION_DATE "DOCTOR_REGISTRATION_DATE", P2.IS_BLOCKED "DOCTOR_IS_BLOCKED", P2.IS_AUTHORIZED "DOCTOR_IS_AUTHORIZED", \
      A.APPOINTMENT_DATE \
    FROM APPOINTMENT A \
    JOIN USERS P ON P.ID = A.PATIENT_ID \
    JOIN USERS P2 ON P2.ID = A.DOCTOR_ID \
    WHERE A.DOCTOR_ID = ? \
  ) A ON TO_CHAR(A.APPOINTMENT_DATE, 'DD.MM.YYYY HH24:MI:SS') = SCHEDULE.DT \
  ORDER BY SCHEDULE.DT
appointment.all=\
  SELECT \
    A.ID AS "APPOINTMENT_ID", \
    P.ID "PATIENT_USER_ID", P.LOGIN "PATIENT_LOGIN", P.PASSWORD "PATIENT_PASSWORD", P.SURNAME "PATIENT_SURNAME", P.NAME "PATIENT_NAME", P.PATRONYMIC "PATIENT_PATRONYMIC", P.USER_GROUP_ID "PATIENT_USER_GROUP_ID", P.REGISTRATION_DATE "PATIENT_REGISTRATION_DATE", P.IS_BLOCKED "PATIENT_IS_BLOCKED", P.IS_AUTHORIZED "PATIENT_IS_AUTHORIZED", \
    P2.ID "DOCTOR_USER_ID", P2.LOGIN "DOCTOR_LOGIN", P2.PASSWORD "DOCTOR_PASSWORD", P2.SURNAME "DOCTOR_SURNAME", P2.NAME "DOCTOR_NAME", P2.PATRONYMIC "DOCTOR_PATRONYMIC", P2.USER_GROUP_ID "DOCTOR_USER_GROUP_ID", P2.REGISTRATION_DATE "DOCTOR_REGISTRATION_DATE", P2.IS_BLOCKED "DOCTOR_IS_BLOCKED", P2.IS_AUTHORIZED "DOCTOR_IS_AUTHORIZED", \
    TO_CHAR(A.APPOINTMENT_DATE, 'DD.MM.YYYY HH24:MI:SS') AS "DATETIME" \
  FROM APPOINTMENT A \
  JOIN USERS P ON P.ID = A.PATIENT_ID \
  JOIN USERS P2 ON P2.ID = A.DOCTOR_ID \
  WHERE A.DOCTOR_ID = ? AND TO_CHAR(A.APPOINTMENT_DATE, 'DD.MM.YYYY') = TO_CHAR(?, 'DD.MM.YYYY')
appointment.one.by.id=\
  SELECT \
    A.ID AS "APPOINTMENT_ID", \
    TO_CHAR(A.APPOINTMENT_DATE, 'DD.MM.YYYY HH24:MI:SS') AS DATETIME, \
    P.ID "PATIENT_USER_ID", P.LOGIN "PATIENT_LOGIN", P.PASSWORD "PATIENT_PASSWORD", P.SURNAME "PATIENT_SURNAME", P.NAME "PATIENT_NAME", P.PATRONYMIC "PATIENT_PATRONYMIC", P.USER_GROUP_ID "PATIENT_USER_GROUP_ID", P.REGISTRATION_DATE "PATIENT_REGISTRATION_DATE", P.IS_BLOCKED "PATIENT_IS_BLOCKED", P.IS_AUTHORIZED "PATIENT_IS_AUTHORIZED",\
    P2.ID "DOCTOR_USER_ID", P2.LOGIN "DOCTOR_LOGIN", P2.PASSWORD "DOCTOR_PASSWORD", P2.SURNAME "DOCTOR_SURNAME", P2.NAME "DOCTOR_NAME", P2.PATRONYMIC "DOCTOR_PATRONYMIC", P2.USER_GROUP_ID "DOCTOR_USER_GROUP_ID", P2.REGISTRATION_DATE "DOCTOR_REGISTRATION_DATE", P2.IS_BLOCKED "DOCTOR_IS_BLOCKED", P2.IS_AUTHORIZED "DOCTOR_IS_AUTHORIZED" \
  FROM APPOINTMENT A \
  JOIN USERS P ON P.ID = A.PATIENT_ID \
  JOIN USERS P2 ON P2.ID = A.DOCTOR_ID \
  WHERE A.ID = ?
appointment.delete=DELETE FROM APPOINTMENT WHERE ID = ?
appointment.create=INSERT INTO APPOINTMENT (DOCTOR_ID, PATIENT_ID, APPOINTMENT_DATE) VALUES (?, ?, ?)

# Medical card history
medical-card-history.all=\
  SELECT \
    A.ID AS "APPOINTMENT_ID", \
    TO_CHAR(A.appointment_date, 'DD.MM.YYYY HH24:MI:SS') AS "DATETIME", \
    MCH.DIAGNOSIS, MCH.THERAPY, \
    P.ID "PATIENT_USER_ID", P.LOGIN "PATIENT_LOGIN", P.PASSWORD "PATIENT_PASSWORD", P.SURNAME "PATIENT_SURNAME", P.NAME "PATIENT_NAME", P.PATRONYMIC "PATIENT_PATRONYMIC", P.USER_GROUP_ID "PATIENT_USER_GROUP_ID", P.REGISTRATION_DATE "PATIENT_REGISTRATION_DATE", P.IS_BLOCKED "PATIENT_IS_BLOCKED", P.IS_AUTHORIZED "PATIENT_IS_AUTHORIZED", \
    P2.ID "DOCTOR_USER_ID", P2.LOGIN "DOCTOR_LOGIN", P2.PASSWORD "DOCTOR_PASSWORD", P2.SURNAME "DOCTOR_SURNAME", P2.NAME "DOCTOR_NAME", P2.PATRONYMIC "DOCTOR_PATRONYMIC", P2.USER_GROUP_ID "DOCTOR_USER_GROUP_ID", P2.REGISTRATION_DATE "DOCTOR_REGISTRATION_DATE", P2.IS_BLOCKED "DOCTOR_IS_BLOCKED", P2.IS_AUTHORIZED "DOCTOR_IS_AUTHORIZED" \
  FROM MEDICAL_CARD_HISTORY MCH \
  JOIN APPOINTMENT A ON MCH.ID = A.ID \
  JOIN USERS P ON P.ID = A.patient_id \
  JOIN USERS P2 ON P2.ID = A.doctor_id \
  WHERE A.PATIENT_ID = ? \
  ORDER BY MCH.ID
medical-card-history.create=INSERT INTO MEDICAL_CARD_HISTORY (ID, APPOINTMENT_ID, DIAGNOSIS, THERAPY) VALUES (?, ?, ?, ?)

# Schedules
schedule-days.all=\
  SELECT A."DATE", COUNT(V.VACATION_DATE) AS IS_VACATION \
  FROM ( \
    SELECT SYSDATE + ROWNUM - 1 AS "DATE" \
    FROM DUAL \
    CONNECT BY ROWNUM <= (SYSDATE + 29) - SYSDATE \
  ) A LEFT JOIN ( \
    SELECT DISTINCT VACATION_DATE \
    FROM VACATION_SCHEDULE \
    WHERE EMPLOYEE_ID = ? AND IS_APPROVED = 1 \
  ) V ON TO_CHAR(A."DATE") = TO_CHAR(V.VACATION_DATE) \
  GROUP BY "DATE" \
  ORDER BY "DATE"
schedule-days.set-vacation=INSERT INTO VACATION_SCHEDULE (EMPLOYEE_ID, VACATION_DATE, IS_APPROVED) VALUES (?, ?, 1)
schedule-days.set-working-day=DELETE FROM VACATION_SCHEDULE WHERE EMPLOYEE_ID = ? AND VACATION_DATE = ?
schedule-appointments.all=\
  WITH \
    RankedVacations AS ( \
      SELECT \
        EMPLOYEE_ID, \
        VACATION_DATE, \
        IS_APPROVED, \
        ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_ID ORDER BY VACATION_DATE) as rn \
      FROM VACATION_SCHEDULE \
      WHERE IS_APPROVED = 0 \
    ), \
    LaggedVacations AS ( \
      SELECT \
        EMPLOYEE_ID, \
        VACATION_DATE, \
        IS_APPROVED, \
        LAG(VACATION_DATE, 1, VACATION_DATE - INTERVAL '1' DAY) OVER (PARTITION BY EMPLOYEE_ID ORDER BY VACATION_DATE) as prev_vacation_date \
      FROM RankedVacations \
    ), \
    VacationGroups AS ( \
      SELECT \
        EMPLOYEE_ID, \
        VACATION_DATE, \
        IS_APPROVED, \
        SUM( \
          CASE \
            WHEN VACATION_DATE = prev_vacation_date + 1 THEN 0 \
            ELSE 1 \
          END \
        ) OVER (PARTITION BY EMPLOYEE_ID ORDER BY VACATION_DATE) as grp \
      FROM LaggedVacations \
    ), \
    VacationApplications AS ( \
      SELECT \
        EMPLOYEE_ID, \
        MIN(VACATION_DATE) AS start_date, \
        MAX(VACATION_DATE) AS end_date, \
        IS_APPROVED \
      FROM VacationGroups \
      GROUP BY EMPLOYEE_ID, grp, IS_APPROVED \
      ORDER BY EMPLOYEE_ID, start_date \
    ), \
    Doctors AS ( \
      SELECT \
        U.ID USER_ID, U.LOGIN, U.PASSWORD, U.SURNAME, U.NAME, U.PATRONYMIC, U.USER_GROUP_ID, U.REGISTRATION_DATE, U.IS_BLOCKED, U.IS_AUTHORIZED,  \
        LISTAGG(DS.specialization_id, ',') AS SPECIALIZATIONS  \
      FROM USERS U  \
      JOIN doctors_specializations DS ON U.id = DS.doctor_id  \
      WHERE U.USER_GROUP_ID = 4  \
      GROUP BY U.ID, U.LOGIN, U.PASSWORD, U.SURNAME, U.NAME, U.PATRONYMIC, U.USER_GROUP_ID, U.REGISTRATION_DATE, U.IS_BLOCKED, U.IS_AUTHORIZED \
    ) \
  SELECT \
    VA.START_DATE, \
    VA.END_DATE, \
    IS_APPROVED, \
    D.* \
  FROM VacationApplications VA \
  JOIN Doctors D ON D.USER_ID = VA.EMPLOYEE_ID
schedule-appointments.approve=\
  UPDATE VACATION_SCHEDULE \
  SET IS_APPROVED = 1 \
  WHERE EMPLOYEE_ID = ? \
  AND VACATION_DATE BETWEEN ? AND ? + 1
schedule-appointments.reject=\
  DELETE FROM VACATION_SCHEDULE \
  WHERE EMPLOYEE_ID = ? \
  AND VACATION_DATE BETWEEN ? AND ? + 1
schedule-appointments.create=CALL INSERT_VACATION_DAYS(?, ?, ?)
